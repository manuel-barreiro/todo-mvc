PORT = 3000
DB_STRING = mongodb+srv://manuelbarreiro:Aspen3815@cluster0.6glvbvc.mongodb.net/?retryWrites=true&w=majority

# require('dotenv').config({path: './config/.env'}) with the previous code we use this .env file to access static files

# The code you provided is using the dotenv module to load environment variables from a .env file located in the ./config directory.
# The dotenv module is commonly used in Node.js applications to manage environment-specific configuration. It allows you to define environment variables in a .env file and load them into the application's process environment.
# By calling require('dotenv').config({path: './config/.env'}), you are loading the .env file located in the ./config directory and populating the process environment with the variables defined in that file. The path option specifies the path to the .env file, in this case, ./config/.env.
# The .env file typically contains key-value pairs, where each line represents a variable assignment. For example:
# PORT = 2121
# DB_STRING = mongodb+srv://demo:demo@cluster0.nfzrd.mongodb.net/todolist?retryWrites=true&w=majority
# Once the .env file is loaded and the environment variables are set, you can access them in your Node.js application using process.env.VARIABLE_NAME, where VARIABLE_NAME is the name of the environment variable you want to access. For example, process.env.DB_HOST will give you the value 'localhost'.
# Using an .env file allows you to store sensitive or environment-specific configuration values separate from your codebase, making it easier to manage different environments (e.g., development, production) and maintain application security. 

# Important to include .env in the .gitignore