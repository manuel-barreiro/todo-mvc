const express = require('express')
const app = express()
const connectDB = require('./config/database')
const homeRoutes = require('./routes/home')
const todoRoutes = require('./routes/todos')

require('dotenv').config({path: './config/.env'})

connectDB()

app.set('view engine', 'ejs')
app.use(express.static('public'))
app.use(express.urlencoded({ extended: true }))
app.use(express.json())

app.use('/', homeRoutes)
app.use('/todos', todoRoutes)
 
app.listen(process.env.PORT, ()=>{
    console.log('Server is running, you better catch it!')
})    


// what's middleware?

// In the context of web development and frameworks like Express.js, middleware refers to functions or code that are executed between processing an incoming request and sending a response. Middleware functions have access to the request and response objects, as well as the next middleware function in the chain.
// Middleware functions in Express.js are used to perform various tasks such as:
// Modifying the request or response objects: Middleware can add, remove, or modify properties of the request or response objects. For example, parsing request data, setting headers, or attaching additional information to the request object.
// Executing code before reaching the route handler: Middleware functions can perform tasks that need to be done before a request reaches the specific route handler. This can include authentication, authorization, logging, error handling, or any other kind of pre-processing.
// Calling the next middleware: A middleware function can decide whether to pass the control to the next middleware in the chain or end the request-response cycle. By calling the next() function, the middleware passes the control to the next middleware function in the stack.
// Terminating the request-response cycle: If a middleware function determines that the request should not proceed further, it can end the cycle by sending a response back to the client. This is often done with functions like res.send(), res.json(), or res.redirect().
// Middleware functions are typically registered and organized using the app.use() method in Express.js. The order in which middleware functions are registered determines the order in which they will be executed. The first registered middleware function will be the first one to handle the request, and the last registered middleware function will be the last one to handle the response before it is sent back to the client.
// Overall, middleware functions provide a flexible and modular way to handle common tasks and add functionality to an Express.js application without cluttering the route handlers with repetitive code.

// what's a static file?

// A static file refers to a file that is served directly to the client by the web server without any modification or processing. Examples of static files include HTML files, CSS stylesheets, JavaScript files, images, fonts, and other types of files that are intended to be delivered to the client as they are.
// Unlike dynamic content that is generated by server-side code based on user requests or data from a database, static files remain the same regardless of the user or their specific request. They are typically used for resources that don't change frequently and can be cached by the client's web browser for faster subsequent requests.
// Static files are commonly used in web development to structure and style web pages, add interactivity through JavaScript, and include media elements such as images or videos. By serving static files separately from dynamic content, web servers can efficiently handle requests for those files and optimize the delivery process.

// app.use(express.static('public'))

// The express.static function is used to serve static files such as images, CSS files, and JavaScript files. In this case, it is being used to serve the contents of the "public" directory.
// By calling app.use(express.static('public')), you are instructing Express to serve the static files from the "public" directory. This means that any files within the "public" directory can be accessed directly from the browser by specifying their paths relative to the "public" directory.
// For example, if you have an image file called "image.jpg" located in the "public" directory, it can be accessed from the browser using the URL http://yourdomain.com/image.jpg.
// This line of code is typically placed before any routes are defined in your Express application. It ensures that Express looks for static files in the "public" directory first before attempting to match routes. If a file is found in the "public" directory that matches the requested path, Express will serve it directly without further processing. If no file is found, Express will continue to the next middleware or route handler in the application.

// app.use(express.urlencoded({ extended: true }))

// The express.urlencoded() middleware is used to parse the data submitted in HTML form submissions and make it available in the req.body object of an Express route handler. It is specifically designed to handle data encoded in the application/x-www-form-urlencoded format, which is the default encoding for HTML form submissions.
// By calling app.use(express.urlencoded({ extended: true })), you are instructing Express to use this middleware and parse the form data. The extended option is set to true, which allows the parsing of rich objects and arrays from the form data. If set to false, the parsing will be limited to simple key-value pairs.
// Once this middleware is enabled, when a client submits a form using the POST method with the application/x-www-form-urlencoded encoding, the data will be parsed and made available in the req.body object of the corresponding route handler. You can then access the form fields and their values using req.body.fieldName.
// It is important to note that starting from Express version 4.16.0, the express.urlencoded() middleware is included with Express by default. Therefore, in most cases, you don't need to explicitly call app.use(express.urlencoded({ extended: true })) unless you have a specific reason to customize its behavior.

// app.use(express.json())

// The express.json() middleware is used to parse incoming JSON payloads from HTTP requests and make the parsed JSON data available in the req.body object of an Express route handler.
// By calling app.use(express.json()), you are instructing Express to use this middleware to parse JSON data. When a client sends a request with a JSON payload, such as in the request body of a POST or PUT request, this middleware will automatically parse the JSON data and make it available in the req.body object.
// Once the JSON data is parsed, you can access its properties and values within your route handlers using req.body.propertyName.
// This middleware is particularly useful when building APIs that communicate using JSON as the data interchange format. It simplifies the process of extracting data from JSON payloads and allows you to work with it directly in your route handlers.
// It's worth noting that starting from Express version 4.16.0, the express.json() middleware is included with Express by default. Therefore, in most cases, you don't need to explicitly call app.use(express.json()) unless you have a specific reason to customize its behavior.